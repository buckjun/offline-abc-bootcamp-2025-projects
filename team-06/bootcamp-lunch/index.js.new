const express = require('express');
const path = require('path');
const db = require('./database.js');
const bcrypt = require('bcrypt');
const session = require('express-session');

const app = express();
const port = 3000;

// EJS를 뷰 엔진으로 설정
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// 'public' 폴더를 정적 파일 경로로 설정
app.use(express.static(path.join(__dirname, 'public')));

// POST 요청의 body(본문)를 파싱하기 위한 미들웨어 설정
app.use(express.urlencoded({ extended: true }));

// 세션 미들웨어 설정
app.use(session({
  secret: 'your-secret-key',
  resave: false,
  saveUninitialized: true,
}));

// 모든 템플릿에서 사용자 정보와 파티 정보에 접근할 수 있게 하는 미들웨어
app.use((req, res, next) => {
  res.locals.user = req.session.user;
  
  // 로그인한 사용자의 파티 목록 가져오기
  if (req.session.user) {
    db.all(
      `SELECT p.* 
       FROM parties p 
       JOIN party_members pm ON p.id = pm.party_id 
       WHERE pm.user_name = ?`, 
      [req.session.user.name],
      (err, parties) => {
        if (err) {
          console.error('파티 목록 조회 실패:', err);
          res.locals.myParties = [];
        } else {
          res.locals.myParties = parties;
        }
        next();
      }
    );
  } else {
    next();
  }
});

// --- 파티 관련 라우트 ---
app.get('/', (req, res) => {
  const sql = "SELECT * FROM parties ORDER BY id DESC";
  db.all(sql, [], (err, rows) => {
    if (err) { return res.status(500).send("서버 오류"); }
    res.render('index', { parties: rows });
  });
});

app.get('/new-party', (req, res) => {
  if (!req.session.user) {
    return res.redirect('/login');
  }
  res.render('new-party');
});

app.post('/party', (req, res) => {
  if (!req.session.user) {
    return res.status(401).send("로그인이 필요합니다.");
  }

  const { title, category, location, meet_time, max_members } = req.body;
  const host_name = req.session.user.name;
  const sql = `INSERT INTO parties (title, location, category, host_name, meet_time, max_members, current_members) 
               VALUES (?, ?, ?, ?, ?, ?, 1)`;
  const params = [title, location, category, host_name, meet_time, max_members];
  
  db.run(sql, params, function(err) {
    if (err) {
      console.error('파티 생성 실패:', err.message);
      return res.status(500).send("서버 오류");
    }

    // 파티 생성자를 party_members 테이블에 자동으로 추가
    const partyId = this.lastID;
    db.run('INSERT INTO party_members (party_id, user_name) VALUES (?, ?)',
      [partyId, host_name],
      (err) => {
        if (err) {
          console.error('파티 멤버 추가 실패:', err.message);
          return res.status(500).send("서버 오류");
        }
        res.redirect('/');
      }
    );
  });
});

app.get('/party/:id', (req, res) => {
  const id = req.params.id;
  const sql = "SELECT * FROM parties WHERE id = ?";
  db.get(sql, [id], (err, party) => {
    if (err) { return res.status(500).send("서버 오류"); }
    if (party) {
      res.render('party-detail', { party: party });
    } else {
      res.status(404).send("해당 파티를 찾을 수 없습니다.");
    }
  });
});

app.post('/party/:id/join', (req, res) => {
  if (!req.session.user) {
    return res.status(401).send("로그인이 필요합니다.");
  }

  const { id } = req.params;
  const userName = req.session.user.name;

  // 이미 참여한 파티인지 확인
  db.get('SELECT * FROM party_members WHERE party_id = ? AND user_name = ?', 
    [id, userName], 
    (err, existingMember) => {
      if (err) { 
        return res.status(500).send("서버 오류"); 
      }
      
      if (existingMember) {
        return res.status(400).send("이미 참여한 파티입니다.");
      }

      // 파티 정보 확인 및 참여 처리
      db.get('SELECT * FROM parties WHERE id = ?', [id], (err, party) => {
        if (err) { 
          return res.status(500).send("서버 오류"); 
        }

        if (!party || party.current_members >= party.max_members) {
          return res.status(400).send("파티가 가득 찼습니다.");
        }

        // 트랜잭션 시작
        db.serialize(() => {
          db.run('BEGIN TRANSACTION');

          // 파티 멤버 추가
          db.run('INSERT INTO party_members (party_id, user_name) VALUES (?, ?)',
            [id, userName], 
            (err) => {
              if (err) {
                db.run('ROLLBACK');
                return res.status(500).send("서버 오류");
              }

              // 현재 인원 수 증가
              db.run('UPDATE parties SET current_members = current_members + 1 WHERE id = ?',
                [id],
                (err) => {
                  if (err) {
                    db.run('ROLLBACK');
                    return res.status(500).send("서버 오류");
                  }

                  db.run('COMMIT');
                  res.redirect('/');
                }
              );
            }
          );
        });
      });
    }
  );
});

// --- 사용자 인증 라우트 ---
app.get('/signup', (req, res) => {
  res.render('signup');
});

app.post('/signup', async (req, res) => {
  const { name, password } = req.body;
  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const sql = `INSERT INTO users (name, password) VALUES (?, ?)`;
    db.run(sql, [name, hashedPassword], function(err) {
      if (err) {
        console.error('회원가입 실패:', err.message);
        return res.status(400).send('이미 사용 중인 이름입니다.');
      }
      res.redirect('/login');
    });
  } catch {
    res.status(500).send('서버 오류');
  }
});

app.get('/login', (req, res) => {
  res.render('login');
});

app.post('/login', (req, res) => {
  const { name, password } = req.body;
  const sql = `SELECT * FROM users WHERE name = ?`;
  db.get(sql, [name], async (err, user) => {
    if (err) { return res.status(500).send('서버 오류'); }
    if (!user) { return res.status(400).send('사용자를 찾을 수 없습니다.'); }
    try {
      if (await bcrypt.compare(password, user.password)) {
        req.session.user = { id: user.id, name: user.name };
        res.redirect('/');
      } else {
        res.status(400).send('비밀번호가 올바르지 않습니다.');
      }
    } catch {
      res.status(500).send('서버 오류');
    }
  });
});

app.get('/logout', (req, res) => {
  req.session.destroy((err) => {
    if (err) { return res.status(500).send('로그아웃 실패'); }
    res.redirect('/');
  });
});

// 서버 시작
app.listen(port, () => {
  console.log(`부캠런치 앱이 http://localhost:${port} 에서 실행 중입니다.`);
});
